DELIMITER $$
-- ---------------------------------------------------------------------
DROP PROCEDURE IF EXISTS GET_ALL_TABLEDEFS $$
CREATE PROCEDURE GET_ALL_TABLEDEFS()
READS SQL DATA
BEGIN
        SELECT TABLEDEF.ID AS TABLEID,
        TABLEDEF.NAME AS TABLENAME, COLUMNDEF.ID AS COLUMNID, COLUMNDEF.NAME AS COLUMNNAME,
        TYPEDEF.NAME AS TYPENAME
        FROM TABLEDEF
        LEFT JOIN COLUMNDEF ON TABLEDEF.ID=COLUMNDEF.TABLEID
        LEFT JOIN TYPEDEF ON TYPEDEF.ID=COLUMNDEF.TYPEID
        ORDER BY TABLEDEF.ID ASC;
END$$

-- ---------------------------------------------------------------------
DROP PROCEDURE IF EXISTS GET_TABLEDEF_BY_ID$$
CREATE PROCEDURE GET_TABLEDEF_BY_ID(ID INT)
READS SQL DATA
BEGIN
        SELECT TABLEDEF.ID AS TABLEID,
        TABLEDEF.NAME AS TABLENAME, COLUMNDEF.ID AS COLUMNID, COLUMNDEF.NAME AS COLUMNNAME,
        TYPEDEF.NAME AS TYPENAME
        FROM TABLEDEF
        JOIN COLUMNDEF ON TABLEDEF.ID=COLUMNDEF.TABLEID
        JOIN TYPEDEF ON TYPEDEF.ID=COLUMNDEF.TYPEID
        WHERE TABLEDEF.ID=ID;
END$$


-- ---------------------------------------------------------------------
DROP PROCEDURE IF EXISTS UPDATE_COLUMNDEF$$
CREATE PROCEDURE UPDATE_COLUMNDEF(TABLEID0 INT, COLUMNID INT, COLUMNNAME VARCHAR(255))
MODIFIES SQL DATA
BEGIN

    SET @TABLENAME = (SELECT NAME
    FROM TABLEDEF WHERE ID=TABLEID0);

    SET @TYPE= (SELECT NAME FROM TYPEDEF
    WHERE ID IN (SELECT TYPEID FROM COLUMNDEF WHERE TABLEID=TABLEID0 AND ID=COLUMNID));

    SET @FORMER_NAME = (SELECT NAME FROM COLUMNDEF WHERE TABLEID=TABLEID0
    AND ID=COLUMNID);

    UPDATE COLUMNDEF
    SET NAME=COLUMNNAME
    WHERE TABLEID=TABLEID0
    AND ID=COLUMNID;
    
    SET @S='';    
    IF @TYPE='INTEGER' THEN
        SET @S = CONCAT('ALTER TABLE ', @TABLENAME, ' CHANGE ', @FORMER_NAME, ' ', COLUMNNAME, ' INT;');
    ELSEIF @TYPE='VARCHAR' THEN
        SET @S = CONCAT('ALTER TABLE ', @TABLENAME, ' CHANGE ', @FORMER_NAME, ' ', COLUMNNAME, ' VARCHAR(255);');
    END IF;
    
    PREPARE STMT FROM @S;
    EXECUTE STMT;
END$$
-- ---------------------------------------------------------------------
DROP PROCEDURE IF EXISTS INSERT_COLUMNDEF$$
CREATE PROCEDURE INSERT_COLUMNDEF(TABLEID INT, COLUMNNAME VARCHAR(255), TYPE VARCHAR(255))
READS SQL DATA
MODIFIES SQL DATA
BEGIN
    DECLARE TYPEID INT;
    DECLARE TABLENAME VARCHAR(255);
    
    SET @TYPEID = (SELECT ID
    FROM TYPEDEF
    WHERE NAME=TYPE);
    
    SET @TABLENAME = (SELECT 
    NAME FROM TABLEDEF
    WHERE ID=TABLEID);
    
    INSERT INTO COLUMNDEF
    (NAME, TABLEID, TYPEID)
    VALUES
    (COLUMNNAME, TABLEID, @TYPEID);

    SET @S = '';
    IF TYPE = 'INTEGER' THEN
        SET @S = CONCAT('ALTER TABLE ', @TABLENAME, ' ADD COLUMN ', COLUMNNAME, ' INT;');
    ELSEIF TYPE = 'VARCHAR' THEN
        SET @S = CONCAT('ALTER TABLE ', @TABLENAME, ' ADD COLUMN ', COLUMNNAME, ' VARCHAR(255);');
    END IF;

    PREPARE STMT FROM @S;
    EXECUTE STMT;
    
END$$

-- ---------------------------------------------------------------------
DROP PROCEDURE IF EXISTS INSERT_TABLEDEF$$
CREATE PROCEDURE INSERT_TABLEDEF(TABLENAME VARCHAR(255))
MODIFIES SQL DATA
BEGIN
    INSERT INTO TABLEDEF
    (NAME)
    VALUES
    (TABLENAME);

    SET @S = CONCAT(
    'CREATE TABLE ', TABLENAME, ' ( ID INT NOT NULL AUTO_INCREMENT, DELETED INT DEFAULT 0, PRIMARY KEY(ID));');
    PREPARE STMT FROM @S;
    EXECUTE STMT;

END$$

-- ---------------------------------------------------------------------
DROP PROCEDURE IF EXISTS MAX_TABLEDEF$$
CREATE PROCEDURE MAX_TABLEDEF()
READS SQL DATA
BEGIN
    SELECT MAX(ID) AS MAXID
    FROM TABLEDEF;
END$$

-- ---------------------------------------------------------------------
DROP PROCEDURE IF EXISTS GET_TABLE_BY_TABLEDEF$$
CREATE PROCEDURE GET_TABLE_BY_TABLEDEF(TABLEDEF VARCHAR(255), LSOC VARCHAR(255))
BEGIN
	SET @S = CONCAT('SELECT ID AS ROWID, ', LSOC, ' FROM ', TABLEDEF, ' WHERE DELETED=0;');
	PREPARE STMT FROM @S;
	EXECUTE STMT;
END$$    

DROP PROCEDURE IF EXISTS DROP_TABLEDEF$$
CREATE PROCEDURE DROP_TABLEDEF(TABLEID0 INT)
MODIFIES SQL DATA
BEGIN

    DECLARE FK_COUNT INT;
    
    SET @TABLENAME = (SELECT NAME
    FROM TABLEDEF
    WHERE ID=TABLEID0);
    
    SELECT COUNT(*)
    INTO FK_COUNT 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE REFERENCED_TABLE_NAME = @TABLENAME;    
    
    IF FK_COUNT = 0 THEN
	DELETE FROM COLUMNDEF
	WHERE TABLEID=TABLEID0;
    
	DELETE FROM TABLEDEF
	WHERE ID=TABLEID0;
    
	SET @S = CONCAT('DROP TABLE ', @TABLENAME, ';');
	PREPARE STMT FROM @S;
	EXECUTE STMT;
    ELSE
	-- NO OP
	SELECT 1;
    END IF;
END$$

DROP PROCEDURE IF EXISTS UPDATE_TABLE_INT$$
CREATE PROCEDURE UPDATE_TABLE_INT(ROWID INT, COLUMNNAME VARCHAR(255), TABLENAME VARCHAR(255), INTVAL INT)
BEGIN

    IF ROWID=-1 THEN
        SET @S = CONCAT('INSERT INTO ', TABLENAME, ' (', COLUMNNAME, ') VALUES (', INTVAL, ');');
    ELSE
        SET @S = CONCAT('UPDATE ', TABLENAME, ' SET ', COLUMNNAME, '=', INTVAL, ' WHERE ID=', ROWID, ";");
    END IF;
    PREPARE STMT FROM @S;
    EXECUTE STMT;
END$$


DROP PROCEDURE IF EXISTS UPDATE_TABLE_VARCHAR$$
CREATE PROCEDURE UPDATE_TABLE_VARCHAR(ROWID INT, COLUMNNAME VARCHAR(255), TABLENAME VARCHAR(255), CHARVAL VARCHAR(255))
BEGIN
    IF ROWID=-1 THEN
        SET @S = CONCAT('INSERT INTO ', TABLENAME, ' (', COLUMNNAME, ') VALUES ("', CHARVAL, '");');
    ELSE
        SET @S = CONCAT('UPDATE ', TABLENAME, ' SET ', COLUMNNAME, '="', CHARVAL, '" WHERE ID=', ROWID, ";");
    END IF;
    PREPARE STMT FROM @S;
    EXECUTE STMT;
END$$


DROP PROCEDURE IF EXISTS DELETE_ROW$$
CREATE PROCEDURE DELETE_ROW(ROWID INT, TABLENAME VARCHAR(255))
BEGIN
    IF ROWID=-1 THEN
        -- NO OP
        SELECT 1;
    ELSE
        SET @S = CONCAT('UPDATE ', TABLENAME, ' SET DELETED=1 WHERE ID=', ROWID, ";");
        PREPARE STMT FROM @S;
        EXECUTE STMT;
    END IF;
END$$


DROP PROCEDURE IF EXISTS RENAME_TABLEDEF$$
CREATE PROCEDURE RENAME_TABLEDEF(TABLEID INT, NEWNAME VARCHAR(255))
BEGIN
    SET @OLD_TABLENAME = (SELECT NAME
    FROM TABLEDEF WHERE ID=TABLEID);

    SET @S=CONCAT('RENAME TABLE ', @OLD_TABLENAME, ' TO ', NEWNAME);
    PREPARE STMT FROM @S;
    EXECUTE STMT;
    DEALLOCATE PREPARE STMT;

    SET @S=CONCAT('UPDATE TABLEDEF SET NAME="', NEWNAME, '" WHERE ID=', TABLEID, ";");
    PREPARE STMT FROM @S;
    EXECUTE STMT;
    DEALLOCATE PREPARE STMT;
END$$

DELIMITER ;
    